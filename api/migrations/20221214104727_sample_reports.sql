-- Add migration script here
INSERT INTO reports (author, title, tags, content) 
VALUES ( 1, 'test1', 'test', '---
title: 「技術的には可能です」と発声するその前に
tags: コミュニケーション 運用 設計
author: yuba
slide: false
---
技術者はよく、実装可否の問い合わせに対して本当はやりたくない・すべきでないと思っているのにやればできることだからと「技術的には可能です」と答えてしまいハマる⋯って本当ですか？　私は最低でもここ10年は「技術的には可能です」と発言した記憶がありません。なぜそう言うことがないかというと、可否の問い合わせを受けた時点で次のようなことを考えてしまうからです。

- **運用は回る？**<br>人力操作が絡むフローがあるけど利用数が増えたときにちゃんとスケールする？<br>休日深夜対応が必要になりそうだけど要員と人件費コストは確保できてる？<br>カスタマーサポート対応激増しそうだけど（以下同文<br>誤操作があったりしてデータの修正依頼が来たときに訂正しようがない要件っぽいけど大丈夫？<br>エンジニアがDB直操作対応するサービスメニューが存在するけど事故リスク、工数コスト、今後の開発停滞リスクは織り込み済み？　事故の際の責任はエンジニアに？
- **事故リスクは？**<br>操作ミス一発でテナントデータを他社に公開しちゃうことになる要件だけどリスク額はちゃんとコストに含んでいる？<br>警告ダイアログを出すから大丈夫としてあるけど、警告ダイアログを読まずにOKを押すことがない人間っています？
- **セキュリティリスクは？**<br>新しい操作フローの追加で、ユーザーが無限に不当な利益を得られるようなコースが生まれてしまっていない？<br>同じく、知ってはいけない情報を知れるコースが生まれてしまってはいない？<br>同じく、できてはいけない操作を可能にするコースが生まれてしまってはいない？<br>意図しないコースが生まれてしまっていないか検討しきれないほど、操作ルートマップが複雑化してしまわない？
- **保守は？**<br>顧客対応の特別版を作ってしまって、今後の機能追加の際には本流にもすべての顧客対応版にも同じ改修を入れていく感じ？　今後の永続的な開発・QAコスト増は織り込み済み？　改修を計画するときにすべての顧客対応版の仕様と齟齬ないかまで毎回全部考慮していく？<br>特別対応のためにロジックに特別フローを入れてしまって、今後すべての改修（以下同文
- **データ分析は？**<br>画面側の動作モデルを変更して、それでデータの意味論が変わってしまうと既存の集計・レポートロジックが間違ったものになり得るけどその調査棚卸し・修正の工数は積んである？<br>データの変更と誤入力訂正がまたっく同じ操作になっているけど、それは集計・レポートの際に区別が付かないですよ、困りません？<br>この機能の利用実績をレポート・分析する必要が間違いなく出てくるはずだけど、どんな履歴データを持っておきたいか検討済みです？
- **利用増対応は？**<br>利用者数が今の10倍に増えたら、もうまともな時間では画面を表示できなくなりそう。<br>利用者数が今の10倍に増えたら、カスタマーサポート対応も比例して増加するタイプの施策なので人件費増まで織り込んだらそもそも利益計画が成立しないサービスでは？<br>利用者数が今の10倍に増えたら、バッチが突き抜けるようになってシステム動かなくなるのでは？
- **法的な問題は？**<br>個人情報の無許可流用では？<br>著作権の侵害では？<br>顧客との信義則違反では？<br>良俗公序に反するのでは？　公になったら大炎上するやつ、もしくは利用者のレピュテーションリスクが大きい

これらに引っかかってしまう場合、その対策工数も含めて考えたときに答えは「非現実的ですね」「技術的にも解決不能な問題を含んでいますね」にしかならないわけです。何か要件の筋が悪い、やりたくないとあなたが感じるときは、ちゃんと言語化すれば上記のような問題を複数含んでいるはずです。言語化して、技術的にも解決不能であるとちゃんと回答していただければと思います。

では「解決不能」と回答すればそれで依頼者は引き取ってくれるか。そうはならないわけですね。依頼者も依頼者で、解決しないといけない問題を抱えているわけだからです（そうでない、ただの思いつき爆弾の人の存在はここではおいておいて）。
そんなときに前に進むためには、「そうでなくこうすればあなたの問題は解決しませんか？」の案を返すことです。それも複数。

そのためには、その場のアクションとしては背景の深掘りが重要。セリフ回しとしては、「技術的にも解決不能な問題を多く含んでいます。問題解決に協力させていただきたいので背景について詳しく聞かせていただけませんか？」。

そして日頃からの自分のスキル養成として、どんな問題解決にも、設計にも、コーディングするにあたっても常に複数の実現案を出しては、それらのメリデメを出し、今回はこのデメリットを特に重視するからこの方法を取ると意志決定するというトレーニングです。

やり方が上から降ってくるだけで裁量がない仕事であっても、意志決定する直前のステップまでは考えて、「つまり今回ボスはこのメリットを重視していてこのデメリットを特に避けようとしているのだな」と解釈するところまではできますのでトレーニングは同様にできるはずです。ボスとの関係次第では、「今回は○○重視ってことですね、勉強になります！」とフィードバック。そしたら自分が思いついていなかった観点がもらえるかもしれないし、ボスがあまり複数案のメリデメを考慮しない人だった場合にはボスのことも一緒に鍛えられますね！

関連項目
---
この件と同様、問題解決を前に進めるためのセリフ回しのヒント集を最近書きましたので、こういうのもっと読みたいという方はこちらもどうぞ。
- [令和最新版エンジニアのリーダーシップ論 - エムスリーテックブログ](https://www.m3tech.blog/entry/engineers-leadership)
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 1, 'test2', 'test', '---
title: はじプロでのゲーム制作
tags: はじプロ はじめてゲームプログラミング NintendoSwitch
author: WO33427414
slide: false
---
はじプロに限った事ではないのですが、自分はゲームを作るとき、操作性や効果性を念頭に入れて制作しております。

１１月からリスペクト制作しているF-ZEROも、見た目はF-ZEROらしく速さを重視していますが、効果性による見た目の速さであり、一定の操作性を維持する為に実速度はそれほど速くありません。

前回リスペクトした”F-ZEROハイパーデトネーター”は、オマージュとしてアレンジしてあるのですが、速さに関しては、実は再現性よりも実速度の速さの研究対象として制作していました。

結果として、作品としては操作性に難ありとして出来上がってしまいましたが、操作可能な最高速度や、それをより速く見せる為の自機のスケールダウンの施行…いわゆるスケールスピード法を採用したりなど、速く見せる為の手法のデータ群としてはいいところに落ち着いたのではないかと自負しております。


今回のF-ZEROですが、実機(SFC版)のマスタークラスの特別エンディングでもわかる通り、実はSFC版オリジナルはそれほど実速度が早い訳ではなく、あの速く見える映像は、拡縮機能による映像的恩恵であるようなところが伺えます。

その辺りを踏まえ、今回のF-ZEROは、視覚効果による速度感とコーナーの視認性の向上による遊びやすさを目指して作成しました。

今回は、前回のスケールスピード法を活用し、テクスチャを使って最小の0.1サイズで自機を作成、カメラをアップさせて速度感を出しています。
(これはコースを広く取る為の手法でもあります)

画角は変更せず、初期値の６０前後辺り(推定)、自機0.1mに対して道幅を2.4mに設定(幅割合24倍)、コースの幅を相対的に広くして感覚的な速度感を落としつつ(操作しやすくする為)、演出としての速度感は、ワールドのテクスチャを細かく書くことにより発生する視覚効果を用いています。

これらは、背景(ワールドのテクスチャのスクロール)によるスピード感をプレイヤーに与えつつ、コースの速度感を遅くさせて視覚情報であるコーナーの視認性を向上、遊びやすくさせるという狙いがあります。

ただし、操作性を深めるため、コーナーリング時の横滑り効果も導入させてるので、プレイヤーが操作技術を獲得する(つまり操作に慣れる)のに一定の期間が要されます。

その辺りは、ノービスクラスや操作練習用のステージを導入し、それらにも一定のゲーム性を追加して遊びながら習得できるようにして解決できるよう検討しています。


ちなみに、前回のハイパーデトネーターの操作性の悪さの原因は、実速度が速い為に高い動体視力が必要な事でした。
また、実速度が速いがゆえに、コーナーのRに対して、自機のコーナーリング性能が合わないRがある、というのも原因の一つでした。

さらに、コースアウトをリスタートに設定していた為、操作に慣れる前にコースアウト→リスタートとなり、playerの操作学習をする機会を少なくしていたのも関連した要因として考えられます。

以上の点を踏まえて今回のF-ZEROは制作しており、前回のハイパーデトネーターが、多少なりとも手法データ群として役に立っているのかな〜と感じている次第であります。

また、その他の視覚効果、聴覚効果についても色々とやっているのですが、長くなるのでとりあえず今回はこの辺までにしておきます。
(次回があるかはわかりませんが…)

こういった書物に書き慣れておらず、拙い文章となってしまいましたが、最後までご覧いただき誠にありがとうございました。
m(_ _)m
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 2, 'test3', 'test', '---
title: Flutter大学の2年間で得られたもの
tags: Flutter
author: naokiwakata
slide: false
---
# はじめに

はじめまして、札幌の大学院生で最後の学生生活満喫中のわかなおです。Flutter大学というコミュニティに所属しておよそ2年間の月日が経ちました。そこでFlutter大学で体験した2年間の出来事を時系列順に振り返ろうと思います。もし入ろうか迷っている方がいたら参考になれば幸いです。

https://flutteruniv.com/

たまには技術以外の話でもいいじゃない。


https://zenn.dev/wakanao

Zennで記事書いてます！

# 大学4年生の夏にKBOYと出会う
出会うと言っても僕がYouTubeで勝手に動画を見つけただけですがね!

https://www.youtube.com/@kboy

今思えばこれが僕の人生の転機でした。2年前、エンジニアYouTuberがブームで発信者の多くは「プログラミングはすごい！」「プログラミングは稼げる！」と騒ぎ立てていました。そんな中KBOYさんという男は等身大のエンジニアとしての自分を発信しており「エンジニアぶっちゃけ辛いよ」とか「年収こんくらいだよ」や「エンジニアのこういうとこが素晴らしい」などなど、これがまあ視聴者と目線が近くて面白い。当時For文のFくらいしか知らないような僕でしたが、このYouTubeを見てエンジニアになってみたい！と強く思うようになりました。
そのタイミングでFlutter大学というオンラインコミュニティがスタートし，僕はエンジニアを目指して入ることとなったのだ。。。！！！

# 共同開発で3ヶ月でアプリリリース
コミュニティに入った当時の技術力はほぼ皆無。変数とかFor文とかわかるけどどうやってアプリは作れるの？？という状況。
そんな中コミュニティ内で共同開発というものが開催されるではないか。

https://blog.flutteruniv.com/flutteruniversity-jointdevelopment-7/

当時の僕は「一人で勉強しててもラチがあかん！一緒に作る人見つけて頑張るぞ！」とこの共同開発で作りたいアプリを発表し一緒に作ってくれる人を募集してみました。幸いなことに2人も一緒にアプリを作ってくださることになり共同開発を経験することができました。2人には本当に感謝していて彼らが一緒に作ってくれていなかったら僕は今頃プログラミングをやっていないかもしれません。

https://qiita.com/naokiwakata/items/1c6d6f4095a02f727b7b

こちらが共同開発でリリースしたアプリです。初めてのアプリをリリースできた時は気絶するほど嬉しかったことを覚えています。今となっては難しくはないアプリでコードも汚いのですが、アプリ開発の基礎をこの共同開発で経験することができました。結局は「手を動かして実際に作ってみること」が大切なのだと実感できました。

# 仕事としてアプリ開発を初経験

共同開発でのアプリリリースから数ヶ月後、なんとKBOYさんから「仕事でアプリ開発を手伝ってくれないか？」と声をかけていただきました（当時の居住地が同じ札幌だったのでご飯行ったりスノボ行ったりしてた）。当時のKBOYさんは技術力がミジンコの僕にお金を払ってアプリ開発の経験と成長の機会を与えてくれました。若者に投資してくれたのです。そこで開発したアプリがこちらです。

https://apps.apple.com/jp/app/%E3%82%B5%E3%82%A6%E3%83%8A%E3%83%93%E3%83%A8%E3%83%AA-%E3%82%B5%E3%82%A6%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AEsns/id1572407427

KBOYさんと、札幌のFlutter大学に所属しているサウナーエンジニアさん（凄腕ハンドボーラーでもある）と僕の3人で開発しました。仕事としての緊張感を持った開発、現役エンジニアによるコードレビューなど、これらの環境が僕をエンジニアとして一歩踏み出させてくれました。感謝しかありません。

# 企業でのサマーインターンに参加
共同開発、仕事としてのアプリ開発を経て多少の成長を遂げた僕は、次のステップとして学生向けに行われている有名企業の夏休みのインターンに応募することとなりました。Flutter大学から羽ばたく初めての瞬間です。開発経験がFlutterのみで募集企業が少なかったりコーディングテストでボッコボコにされたりと色々あったのですが、最終的には2社×2週間のサマーインターンに参加することができました。

インターンでは2社とも実際にアプリ開発に参加し「難しすぎワロタ」と感じると同時に、既に広く使用されているアプリの完成度に驚きを覚えました。1社目のインターンは最もキツかった2週間でしたが、その分知らないことにたくさん触れることができ最も成長できた2週間だったなと感じています。やっぱり未知の環境に飛び込むの大事ですね。みんなも迷ったら挑戦してみよや。

# 個人開発でそこそこの完成度のアプリをリリース
インターンでさらなる成長を遂げた僕は、今まで培った技術を結集してアプリを個人で作ろうと思いました。そこで開発したアプリがこちらです。

https://apps.apple.com/jp/app/%E3%82%AA%E3%83%BC%E3%83%AB%E3%82%A6%E3%82%A7%E3%82%A4%E3%82%BA%E4%BA%8C%E9%83%8E-%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%B3%E3%83%9E%E3%83%83%E3%83%97%E6%A4%9C%E7%B4%A2-%E3%82%AF%E3%83%81%E3%82%B3%E3%83%9F%E3%82%A2%E3%83%97%E3%83%AA/id1604416308


https://zenn.dev/wakanao/articles/028a2e4ab5f71b

二郎好きには刺さるニッチなアプリとなっているので興味があれば入れてみてください！

# オフ会、交流会に参加し知り合いエンジニアの知り合いできまくり
Flutter大学では定期的にオンライン交流会、不定期的にオフ会が開かれています。

https://blog.flutteruniv.com/flutteruniversity-online-exchange-meeting/

https://blog.flutteruniv.com/report_fukuoka_meeting_202203/

オフ会オンライン交流会には現役のエンジニアはもちろん、それ以外の職種の方、学生など、さまざまな方が参加しています！ 学生の僕は暇なので全国各地を飛び回り（というほどではないが）、大阪や福岡、札幌のオフ会などに参加しました。オフ会に参加される方は皆アクティブで優しい兄ちゃんばかりで、学生ということで可愛がってくれています（と信じています） 仲良くなったエンジニアの方の1人とはなんと、来年新卒で入社する会社が入ってるビル（職場）が同じという偶然。もはやFlutter大学の繋がり、運命を感じずにはいられません。Flutter大学に入ったことで学生のうちから素晴らしい大人の方達と出会えることができました。ホンマ最高やねん。

# 新卒でエンジニアとして東京進出
「共同開発、仕事でのアプリ開発、インターン、個人開発」を通じて成長を遂げた僕は満を辞して、エンジニアとしての就職活動を始めます。結果として2023年の4月から東京の企業でエンジニアとして採用をしていただくことができました。大学4年生のプログラミング未経験の頃から比べると想像もできないような嬉しい結果を得ることができました。この結果はFlutter大学がなければ得られなかったと思っています。誰に対しても素晴らしい影響をもたらすとは思っていませんが、成長したいと本気で思って行動を起こす人たちにとってはFlutter大学は拠り所となり成長の場となると思っています。来年からエンジニアとして働くことがとても楽しみです。

# 大学院生兼フリーランスエンジニアとして働いた
修士2年の夏から秋にかけて大学の研究の傍ら，お仕事を請け負わせていただきました。詳細は省きますが、フリーランスとしての働き方、クライアントが求めるレベルでの期日が決められた開発、実際にアプリが運用されている場面を見ることができたこと、など普通の大学生では経験できないことをたくさん経験させていただきました。本当に感謝しかないです。この経験を自分のものにしさらに成長したいと強く感じています。がんばるぞっ♡

# 僕にとって 「Flutter大学とは」
最後になりますが、僕にとってFlutter大学とは「エンジニア人生の基盤」ですかね（スガシカオ~♪）
僕のエンジニア人生とFlutter大学は切っても切れない関係です。エンジニアとしても人としても成長できる機会がFlutter大学にはありました。まだまだエンジニアとしては未熟で勉強しなければならないことばかりですが，ここでの経験をもとにエンジニアとしても人としてもさらに成長していきたいと思っています。
最後まで読んでいただきありがとうございます！それでは筋トレ行ってきます。
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 3, 'test4', 'test', '---
title: 品質保証エンジニアという知る人ぞ知るお仕事
tags: 品質保証 QA QAエンジニア
author: hrb_yoshi
slide: false
---
# はじめに
HRBrainでQAエンジニアを担当しております。

皆様は「QAエンジニア」という職種をご存知でしょうか。
非IT系の方はもちろんのこと、IT系の方でもイメージが湧かない方は多いのではないでしょうか。

本記事では、「QAエンジニア」についてご紹介した後、HRBrainの一員として意識していることや、QAエンジニアへの転向について書かせていただきます。

この記事は、HRBrain Advent Calendar 2022 9日目の記事です。

https://qiita.com/advent-calendar/2022/hrbrain

# QAエンジニアとは
<b>Quality Assurance（ = 品質保証 ）</b>
QAエンジニアの「QA」とは「<font color="red">品質保証</font>」を意味する英熟語の頭文字をとったものです。
その名の通り、製品品質の担保を至上命題とし、<font color="red">品質向上・維持</font>に向けた幅広い活動を担当します。

## QAエンジニアとテスターの違い
よく混同されるのはテスターとの違いでしょう。
組織によって定義は異なり明確な線引きはありませんが、私が考える両者の違いは以下のとおりです。

- **テスター**
    - 既存のテスト仕様書やテストケース一覧をもとにテストを実行
    - テストケースの正確かつ迅速な消化が最重要

- **QAエンジニア**
    - 製品仕様を把握して検証業務全体を担当
        - テスト観点の整理
        - ケースの作成、実行、進捗管理
        - 不具合候補発見後の対応
    - 「バグの作り込み」の抑止

検証業務を担当するという点は両者共通ですが、テスターが「実行」という一点に特化するのに対し、QAエンジニアはより幅広い工程に関与します。

# HRBrainのQAエンジニアとして意識していること
そんな幅広い領域を担当するQAエンジニアですが、HRBrainのQAエンジニアとして私が意識していることを僭越ながらご紹介します。

## 「体験」を通して製品仕様を理解すること
HRBrainではアジャイル開発を採用しており、スピード感が重視されます。
無論、ハイスキルなテックリードやエンジニアによって入念に設計されていますが、アジャイル開発である以上、「包括的なドキュメントよりも動くソフトウェア」という考えのもとでプロジェクトは進行します。

こうした環境の中でも、QAエンジニアは製品の仕様を幅広く、そして正確に把握する必要があります。
包括的なドキュメントが存在しない環境下では、製品に実際に触れて仕様を理解する他ありません。
そのため、ドキュメントが完璧ではないことに過剰な拒否反応を示すことなく、<font color="red">「今、目の前にあるものが仕様書であり設計書」</font>という考えのもとで、様々な観点でいじくり回して仕様を確認する好奇心が求められます。

## テスト観点にアタリをつけること
アジャイルは、ウォーターフォールモデルと比べて開発サイクルが短いため、QAの準備期間も短くなりがちです。
網羅的なテスト設計やケース一覧を作成すると時間内でQAタスクを消化しきれなくなってしまいます。
そのため、品質低下を抑えつつ<font color="red">テストケース数を削ること</font>を継続的に行わなければなりません。
完璧な正解は存在しない、永遠の課題です。

## 不具合が出そうな箇所を予測すること
テスト観点のアタリのつけ方、ケースの削り方はケースバイケースですが、その中でも「不具合が出そうなところを予測すること」は、普遍的な観点と言えます。

例えば、製品種別によらず、不具合が出やすいのは境界値や[同時実行制御系](https://ja.wikipedia.org/wiki/%E4%B8%A6%E8%A1%8C%E6%80%A7%E5%88%B6%E5%BE%A1)といった側面でしょうか。
弊社サービスを含め、多くのSaaSには権限設定（特定の操作の実行可否を制限する機能）があります。

例えば、ある人物が権限を要求する操作を実行する裏で、別の人がその人から権限を外したらどうなるでしょう。
操作を実行する<b>直前に</b>最新の権限保有状態を再確認していないと、「権限を持っていない人が操作できる」という状態が発生します。
場合によっては、権限昇格攻撃にも繋がってしまいますね。

# QAエンジニアへの転向について思うこと
「QAエンジニア ≒ テスター」と考えられがちですが両者は似て非なるものであり、QAエンジニアは考えることが多いと同時に、様々な領域の知識を活かす機会に恵まれています。
テスト経験者はもちろんのこと、他職種から転向する場合でも、それまでのエンジニア経験を十二分に活かせるでしょう。

私自身、新卒では金融系SIer（インフラエンジニア）に入社し、その後、化学メーカー（QA＆プログラマ）、第三者検証（QA）と進み、そしてHRBrainに入社しました。

インフラエンジニア時代に得た知識は、自社製品と他社サービスを連携するQAに活用できましたし、コードを書いた経験は、上述のような同時実行制御を始めとするテスト観点の検討に活きています。
第三者検証での経験は、言わずもがなですね。

システムエンジニアという職業は、「アプリ系か、インフラ系か」という二者択一のキャリア選択を求められる傾向がありますが、その両方に手を伸ばせることは、QAエンジニアの魅力であり、楽しさです。


# 最後に
「システムエンジニア」という職業において、「QAエンジニア」という職種の間口は特に広いです。
私がお世話になった転職エージェントいわく、IT未経験者を採用する会社さえも存在する・・・とのことでした。
この事実は、過去にどのような経験を積んだかによらず、あらゆる経験や知識を活かせる可能性に富む職種であることを示唆します。

「品質」に興味がある方はもちろんのこと、新たなキャリアに挑戦したいという方は、ぜひ一度「QAエンジニア」という職種をご検討なさってはいかがでしょうか。

https://www.hrbrain.co.jp/recruit

最後までご覧いただき、ありがとうございました。
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 4, 'test100', 'test', '---
title: TestCafeを触ってみた
tags: TestCase
author: iuchim
slide: false
---
これは[Wanoグループ Advent Calendar 2022](https://qiita.com/advent-calendar/2022/wano-group)、9日目の記事です。

EDOCODEサーバーサイドエンジニアの井内です。

以前からE2Eテストフレームワークの調査をしてみたいと思っていまして、Advent Calendarを書くネタとして[TestCafe](https://testcafe.io/)を触ってみました。

### インストール

下記のコマンドでインストールできます。

```bash
$ npm install -g testcafe
```

### サンプルテスト作成

ここのサンプルコードを参考にして、簡単なテストを作成してみました。
今把握している要件では別タブを開いてそちらを操作する必要がありまして、別タブのタイトル取得をするようにしました。

```

このテストでは別タブのタイトルが動的に書き換えられていて、`wait`で待って取得しています。（これについてはもしかすると他にもっと良いやり方があるかもです）

### PCテスト実行

上記で作成してテストコードを実行してみます。
コマンドは下記のように`testcafe`を使って、ブラウザとテストコードを引数で指定します。

```bash
$ testcafe chrome test.js
$ testcafe firefox test.js
$ testcafe safari test.js
$ testcafe edge test.js
```

ヘッドレスブラウザを使うこともできます。

```bash
$ testcafe chrome:headless test.js
```

### モバイルテスト実行

モバイルテストはテスト用のURLを生成して、そこにアクセスすることで実行できます。

```bash
$ testcafe remote test.js
```

オプションでQRコードを表示することもできます。

```bash
$ testcafe remote test.js --qr-code
```

### 使ってみた感想

WebDriver不要で、npm packageのインストールだけでテスト実行環境を作れるのはとても楽でした。（`npm install`から5分くらいでサンプルコード実行までできました）

別タブへのアクセスもできますし、主要ブラウザは一通りサポートしているようなので、大きな問題なく使うことができそうです。

[EDOCODE Advent Calendar](https://adventar.org/calendars/7645)の担当枠がまだあるので、次の記事ではCI実行設定を試してみようと思います。

### 最後に

現在EDOCODEでは、エンジニア・デザイナー・プロダクトマネジャーを募集しています。ご興味のある方は、こちらの採用ページも是非ご覧ください！

https://go.edocode.co.jp/jobs
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 5, 'test101', 'test', '---
title: 【Android】Jetpack DataStoreの単体テストをサクッと行ってみた
tags: Android Kotlin Jetpack unittest
author: leb397
slide: false
---
# はじめに
皆さん、ごきげんよう！れぶです！

今回の記事では、SharedPreferencesの代替策である`Jetpack DataStore`に関して、基本的な単体テストの手順を整理します。

**Preference DataStore（以降、DataStore）を用いた値の読み書きを単体テストレベルで検証したい方**に特に参考になればと思います。それでは、参りましょう！！

# 開発環境
* MacBook Air
* Android Studio Dolphin | 2021.3.1
* Kotlin
* compileSdkVersion 33
* targetSdkVersion 33
* minSdkVersion 21
* Jetpack DataStore 1.1.0-alpha01

# 前提
Boolean値を読み書きするDataStoreを対象とします。``saveLaunch()``の呼び出し前後で、保存された値が正しく変更できているかをテストします。

```LaunchDataStore.kt
val Context.dataStore: DataStore<Preferences> by preferencesDataStore(
    name = "preferences"
)

//DataStoreの設定
class LaunchDataStore(private val dataStore: DataStore<Preferences>) {
    suspend fun saveLaunch() {
        this.dataStore.edit {
            it[PreferenceKeys.LAUNCH] = true
        }
    }
    val preferenceFlow: Flow<Boolean> =
        dataStore.data
            .catch { exception ->
                if (exception is IOException) {
                    emit(emptyPreferences())
                } else {
                    throw exception
                }
            }.map {
                it[PreferenceKeys.LAUNCH] ?: false
            }
}

private object PreferenceKeys {
    val LAUNCH = booleanPreferencesKey("isLaunch")
}
```

# テスト手順
### 1. 依存関係の追加
```build.gradle
    //コルーチンの単体テスト用
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.6.4"
```
適宜最新バージョンに合わせてください。

### 2. テストクラスの作成
今回はエミュレータで実行する単体テストであるため、``src/androidTest/java``内にテストクラスを作成します。以降の手順に関しては、このクラスに記述します。

``src/test/java``内で作成したクラスでテストしても上手く実行できないため、ご注意ください。

### 3. DataStoreインスタンスの生成
まず``PreferenceDataStoreFactory.create()``でDataStoreのインスタンスを生成します。その際に必要な引数は、事前に定義しておきます。

今回はLaunchDataStoreクラス内でDataStoreの読み書きを記述しているため、``LaunchDataStore``インスタンスも生成します。

```DataStoreUnitInstrumentedTest.kt
    private val TEST_DATASTORE_NAME = "preferences"
    private val dispatcher = UnconfinedTestDispatcher()
    private val context: Context = 
        InstrumentationRegistry.getInstrumentation().targetContext
    private val scope = TestScope(dispatcher + Job())
    private val dataStore: DataStore<Preferences> =
        PreferenceDataStoreFactory.create(
            scope = scope,
            produceFile = { context.preferencesDataStoreFile(TEST_DATASTORE_NAME) }
        )
    private val launchDataStore = LaunchDataStore(dataStore)
```

### 4. テスト前処理の設定
DataStoreの読み書きはコルーチンを元に非同期で処理されるため、テスト前に``Dispatchers.setMain``を用いて``MainDispatcher``を``TestDispatcher``に置き換える必要があります。

また、念のためDataStoreで保存されるデータをクリアにするため、DataStoreファイル全体を削除します。複数回テストを繰り返した場合に、``There are multiple DataStores active for the same file.``と怒られないように対策しています。

```DataStoreUnitInstrumentedTest.kt
    @Before
    fun setup() {
        //データを毎回新規にするためにファイル全削除
        context.run {
            File(filesDir, "datastore").deleteRecursively()
        }
        Dispatchers.setMain(dispatcher)
    }
```
### 5. テスト後処理の設定
テスト終了後は、DispatcherとTestScopeをきちんとリセットしてあげましょう。
```DataStoreUnitInstrumentedTest.kt
    @After
    fun tearDown() {
        Dispatchers.resetMain()
        scope.cancel()
    }
```
### 6. 書き込み前後のデータをテスト

さていよいよテスト本番です。非同期処理のため、``runTest``で囲みます。

デフォルトでは``false``が返ってきて、``launchDataStore.saveLaunch()``の実行後は``true``が返ってくればテスト大成功です。

```DataStoreUnitInstrumentedTest.kt
    @Test
    fun validateIsTrue() {
        scope.runTest {
            assertEquals(false,launchDataStore.preferenceFlow.firstOrNull())
            //trueに変更
            launchDataStore.saveLaunch()
            assertEquals(true,launchDataStore.preferenceFlow.firstOrNull())
        }
    }
```
## 全コード
https://github.com/seiyaleb/CoroutineTrialApp/blob/master/app/src/androidTest/java/com/coroutinetrialapp/DataStoreUnitInstrumentedTest.kt

# おわりに
今回はJetpack Preference DataStoreの単体テスト方法をサクッとまとめました。**DataStoreはコルーチンを使用している**ため、コルーチンを用いたテスト方法（「参考サイト」に記載）が理解できていれば簡単に行えるのかなと実際やってみて感じました。

上記のやり方を応用してより複雑なDataStoreの単体テストも実現できると思うので、この記事が少しでも役立つと嬉しいです。以上です。ありがとうございました！

# 参考サイト
* [DataStore and testing](https://medium.com/androiddevelopers/datastore-and-testing-edf7ae8df3d8)
* [DataStoreのユニットテスト](https://saito-yusuke.com/datastore%E3%81%AE%E3%83%A6%E3%83%8B%E3%83%83%E3%83%88%E3%83%86%E3%82%B9%E3%83%88/)
* [There are multiple DataStores active for the same file in HiltAndroidTest](https://stackoverflow.com/questions/70847060/there-are-multiple-datastores-active-for-the-same-file-in-hiltandroidtest)
* [Build instrumented tests](https://developer.android.com/training/testing/instrumented-tests)
* [Testing Kotlin coroutines on Android](https://developer.android.com/kotlin/coroutines/test)
* [DroidKaigi 2022 - Androidのモダンな技術選択にあわせて自動テストもアップデートしよう | Nozomi Takuma [JA]](https://www.youtube.com/watch?v=6O1wLS9V6XA&t=1368s)
* [Kotlin coroutines 1.6.0-RCでリワークされたkotlinx-coroutines-testを見てみる](https://qiita.com/myoshita/items/ddf32d1629abeaa8442c)
');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 1, 'test200', 'test', '---
title: ttttt
tags: TestCase
author: iuchim
slide: false
---
tttttttttttttttttttttttttttttttttttttttttttttttttttttttt');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 1, 'test590', 'test', '---
title: lllll
tags: TestCase
author: iuchim
slide: false
---
lllllllllllllllllllllllllllllllllllllllllllllllllllll');

INSERT INTO reports (author, title, tags, content) 
VALUES ( 1, 'test3145', 'test', '---
title: wwmmw
tags: TestCase
author: iuchim
slide: false
---
WWWWWWmmwmmwmwmmmmmmmwmmwmwmmwmwmwwwmwmwmwmmwm');